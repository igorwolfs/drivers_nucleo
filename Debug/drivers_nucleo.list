
drivers_nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000638  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080007fc  08000804  00010804  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080007fc  080007fc  00010804  2**0
                  CONTENTS
  4 .ARM          00000000  080007fc  080007fc  00010804  2**0
                  CONTENTS
  5 .preinit_array 00000000  080007fc  08000804  00010804  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080007fc  080007fc  000107fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000800  08000800  00010800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010804  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000804  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000804  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00010804  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000a97  00000000  00000000  0001082e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000275  00000000  00000000  000112c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000c0  00000000  00000000  00011540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000098  00000000  00000000  00011600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000245f  00000000  00000000  00011698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001066  00000000  00000000  00013af7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00009dcf  00000000  00000000  00014b5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0001e92c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000024c  00000000  00000000  0001e97c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080007e4 	.word	0x080007e4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	080007e4 	.word	0x080007e4

08000204 <delay>:
#include <string.h>
#include "stm32f446xx.h"
#include "stm32f446xx_gpio_driver.h"
#include "stm32f446xx_spi_driver.h"

void delay(void) {
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
	for (int i=0; i< 5000000; i++) {
 800020a:	2300      	movs	r3, #0
 800020c:	607b      	str	r3, [r7, #4]
 800020e:	e002      	b.n	8000216 <delay+0x12>
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	3301      	adds	r3, #1
 8000214:	607b      	str	r3, [r7, #4]
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	4a04      	ldr	r2, [pc, #16]	; (800022c <delay+0x28>)
 800021a:	4293      	cmp	r3, r2
 800021c:	ddf8      	ble.n	8000210 <delay+0xc>
		;
	}
}
 800021e:	bf00      	nop
 8000220:	bf00      	nop
 8000222:	370c      	adds	r7, #12
 8000224:	46bd      	mov	sp, r7
 8000226:	bc80      	pop	{r7}
 8000228:	4770      	bx	lr
 800022a:	bf00      	nop
 800022c:	004c4b3f 	.word	0x004c4b3f

08000230 <main>:


// Initialize SPI to the pins that you can find

int main() {
 8000230:	b580      	push	{r7, lr}
 8000232:	b084      	sub	sp, #16
 8000234:	af00      	add	r7, sp, #0
	// NOTE: PC13 is the button
	// PB13


	GPIO_Handle_t GPIOled;
	GPIOled.GPIO_PinConfig.GPIO_PinNumber = 13;
 8000236:	230d      	movs	r3, #13
 8000238:	723b      	strb	r3, [r7, #8]
	GPIOled.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 800023a:	2301      	movs	r3, #1
 800023c:	727b      	strb	r3, [r7, #9]
	GPIOled.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_MEDIUM;
 800023e:	2301      	movs	r3, #1
 8000240:	72bb      	strb	r3, [r7, #10]
	GPIOled.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000242:	2300      	movs	r3, #0
 8000244:	72fb      	strb	r3, [r7, #11]
	GPIOled.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000246:	2300      	movs	r3, #0
 8000248:	733b      	strb	r3, [r7, #12]

	GPIO_PeriClockControl(GPIOB, ENABLE);
 800024a:	2101      	movs	r1, #1
 800024c:	4806      	ldr	r0, [pc, #24]	; (8000268 <main+0x38>)
 800024e:	f000 f837 	bl	80002c0 <GPIO_PeriClockControl>
	GPIO_Init(&GPIOled);
 8000252:	1d3b      	adds	r3, r7, #4
 8000254:	4618      	mov	r0, r3
 8000256:	f000 f903 	bl	8000460 <GPIO_Init>

	while (1) {
		GPIO_ToggleOutputPin(GPIOB, GPIO_PIN_NO_13);
 800025a:	210d      	movs	r1, #13
 800025c:	4802      	ldr	r0, [pc, #8]	; (8000268 <main+0x38>)
 800025e:	f000 fa87 	bl	8000770 <GPIO_ToggleOutputPin>
		delay();
 8000262:	f7ff ffcf 	bl	8000204 <delay>
		GPIO_ToggleOutputPin(GPIOB, GPIO_PIN_NO_13);
 8000266:	e7f8      	b.n	800025a <main+0x2a>
 8000268:	48000400 	.word	0x48000400

0800026c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800026c:	480d      	ldr	r0, [pc, #52]	; (80002a4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800026e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000270:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000274:	480c      	ldr	r0, [pc, #48]	; (80002a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000276:	490d      	ldr	r1, [pc, #52]	; (80002ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8000278:	4a0d      	ldr	r2, [pc, #52]	; (80002b0 <LoopForever+0xe>)
  movs r3, #0
 800027a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800027c:	e002      	b.n	8000284 <LoopCopyDataInit>

0800027e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800027e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000280:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000282:	3304      	adds	r3, #4

08000284 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000284:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000286:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000288:	d3f9      	bcc.n	800027e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800028a:	4a0a      	ldr	r2, [pc, #40]	; (80002b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800028c:	4c0a      	ldr	r4, [pc, #40]	; (80002b8 <LoopForever+0x16>)
  movs r3, #0
 800028e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000290:	e001      	b.n	8000296 <LoopFillZerobss>

08000292 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000292:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000294:	3204      	adds	r2, #4

08000296 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000296:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000298:	d3fb      	bcc.n	8000292 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800029a:	f000 fa7f 	bl	800079c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800029e:	f7ff ffc7 	bl	8000230 <main>

080002a2 <LoopForever>:

LoopForever:
  b LoopForever
 80002a2:	e7fe      	b.n	80002a2 <LoopForever>
  ldr   r0, =_estack
 80002a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80002a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002ac:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002b0:	08000804 	.word	0x08000804
  ldr r2, =_sbss
 80002b4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002b8:	2000001c 	.word	0x2000001c

080002bc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002bc:	e7fe      	b.n	80002bc <ADC_IRQHandler>
	...

080002c0 <GPIO_PeriClockControl>:
 *
 * @Note              -  none

 */

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi) {
 80002c0:	b480      	push	{r7}
 80002c2:	b083      	sub	sp, #12
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
 80002c8:	460b      	mov	r3, r1
 80002ca:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE) {
 80002cc:	78fb      	ldrb	r3, [r7, #3]
 80002ce:	2b01      	cmp	r3, #1
 80002d0:	d157      	bne.n	8000382 <GPIO_PeriClockControl+0xc2>
		if (pGPIOx==GPIOA){
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80002d8:	d106      	bne.n	80002e8 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 80002da:	4b59      	ldr	r3, [pc, #356]	; (8000440 <GPIO_PeriClockControl+0x180>)
 80002dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002de:	4a58      	ldr	r2, [pc, #352]	; (8000440 <GPIO_PeriClockControl+0x180>)
 80002e0:	f043 0301 	orr.w	r3, r3, #1
 80002e4:	6413      	str	r3, [r2, #64]	; 0x40
		}
		else if(pGPIOx==GPIOH){
			GPIOH_PCLK_DI();
		}
	}
}
 80002e6:	e0a6      	b.n	8000436 <GPIO_PeriClockControl+0x176>
		else if(pGPIOx==GPIOB){
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	4a56      	ldr	r2, [pc, #344]	; (8000444 <GPIO_PeriClockControl+0x184>)
 80002ec:	4293      	cmp	r3, r2
 80002ee:	d106      	bne.n	80002fe <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80002f0:	4b53      	ldr	r3, [pc, #332]	; (8000440 <GPIO_PeriClockControl+0x180>)
 80002f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002f4:	4a52      	ldr	r2, [pc, #328]	; (8000440 <GPIO_PeriClockControl+0x180>)
 80002f6:	f043 0302 	orr.w	r3, r3, #2
 80002fa:	6413      	str	r3, [r2, #64]	; 0x40
}
 80002fc:	e09b      	b.n	8000436 <GPIO_PeriClockControl+0x176>
		else if(pGPIOx==GPIOC){
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	4a51      	ldr	r2, [pc, #324]	; (8000448 <GPIO_PeriClockControl+0x188>)
 8000302:	4293      	cmp	r3, r2
 8000304:	d106      	bne.n	8000314 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000306:	4b4e      	ldr	r3, [pc, #312]	; (8000440 <GPIO_PeriClockControl+0x180>)
 8000308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800030a:	4a4d      	ldr	r2, [pc, #308]	; (8000440 <GPIO_PeriClockControl+0x180>)
 800030c:	f043 0304 	orr.w	r3, r3, #4
 8000310:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000312:	e090      	b.n	8000436 <GPIO_PeriClockControl+0x176>
		else if(pGPIOx==GPIOD){
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	4a4d      	ldr	r2, [pc, #308]	; (800044c <GPIO_PeriClockControl+0x18c>)
 8000318:	4293      	cmp	r3, r2
 800031a:	d106      	bne.n	800032a <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 800031c:	4b48      	ldr	r3, [pc, #288]	; (8000440 <GPIO_PeriClockControl+0x180>)
 800031e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000320:	4a47      	ldr	r2, [pc, #284]	; (8000440 <GPIO_PeriClockControl+0x180>)
 8000322:	f043 0308 	orr.w	r3, r3, #8
 8000326:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000328:	e085      	b.n	8000436 <GPIO_PeriClockControl+0x176>
		else if(pGPIOx==GPIOE){
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	4a48      	ldr	r2, [pc, #288]	; (8000450 <GPIO_PeriClockControl+0x190>)
 800032e:	4293      	cmp	r3, r2
 8000330:	d106      	bne.n	8000340 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000332:	4b43      	ldr	r3, [pc, #268]	; (8000440 <GPIO_PeriClockControl+0x180>)
 8000334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000336:	4a42      	ldr	r2, [pc, #264]	; (8000440 <GPIO_PeriClockControl+0x180>)
 8000338:	f043 0310 	orr.w	r3, r3, #16
 800033c:	6413      	str	r3, [r2, #64]	; 0x40
}
 800033e:	e07a      	b.n	8000436 <GPIO_PeriClockControl+0x176>
		else if(pGPIOx==GPIOF){
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	4a44      	ldr	r2, [pc, #272]	; (8000454 <GPIO_PeriClockControl+0x194>)
 8000344:	4293      	cmp	r3, r2
 8000346:	d106      	bne.n	8000356 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000348:	4b3d      	ldr	r3, [pc, #244]	; (8000440 <GPIO_PeriClockControl+0x180>)
 800034a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800034c:	4a3c      	ldr	r2, [pc, #240]	; (8000440 <GPIO_PeriClockControl+0x180>)
 800034e:	f043 0320 	orr.w	r3, r3, #32
 8000352:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000354:	e06f      	b.n	8000436 <GPIO_PeriClockControl+0x176>
		else if(pGPIOx==GPIOG){
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	4a3f      	ldr	r2, [pc, #252]	; (8000458 <GPIO_PeriClockControl+0x198>)
 800035a:	4293      	cmp	r3, r2
 800035c:	d106      	bne.n	800036c <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 800035e:	4b38      	ldr	r3, [pc, #224]	; (8000440 <GPIO_PeriClockControl+0x180>)
 8000360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000362:	4a37      	ldr	r2, [pc, #220]	; (8000440 <GPIO_PeriClockControl+0x180>)
 8000364:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000368:	6413      	str	r3, [r2, #64]	; 0x40
}
 800036a:	e064      	b.n	8000436 <GPIO_PeriClockControl+0x176>
		else if(pGPIOx==GPIOH){
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	4a3b      	ldr	r2, [pc, #236]	; (800045c <GPIO_PeriClockControl+0x19c>)
 8000370:	4293      	cmp	r3, r2
 8000372:	d160      	bne.n	8000436 <GPIO_PeriClockControl+0x176>
			GPIOH_PCLK_EN();
 8000374:	4b32      	ldr	r3, [pc, #200]	; (8000440 <GPIO_PeriClockControl+0x180>)
 8000376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000378:	4a31      	ldr	r2, [pc, #196]	; (8000440 <GPIO_PeriClockControl+0x180>)
 800037a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800037e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000380:	e059      	b.n	8000436 <GPIO_PeriClockControl+0x176>
	else if (EnorDi == DISABLE) {
 8000382:	78fb      	ldrb	r3, [r7, #3]
 8000384:	2b00      	cmp	r3, #0
 8000386:	d156      	bne.n	8000436 <GPIO_PeriClockControl+0x176>
		if (pGPIOx==GPIOA){
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800038e:	d106      	bne.n	800039e <GPIO_PeriClockControl+0xde>
			GPIOA_PCLK_DI();
 8000390:	4b2b      	ldr	r3, [pc, #172]	; (8000440 <GPIO_PeriClockControl+0x180>)
 8000392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000394:	4a2a      	ldr	r2, [pc, #168]	; (8000440 <GPIO_PeriClockControl+0x180>)
 8000396:	f023 0301 	bic.w	r3, r3, #1
 800039a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800039c:	e04b      	b.n	8000436 <GPIO_PeriClockControl+0x176>
		else if(pGPIOx==GPIOB){
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	4a28      	ldr	r2, [pc, #160]	; (8000444 <GPIO_PeriClockControl+0x184>)
 80003a2:	4293      	cmp	r3, r2
 80003a4:	d106      	bne.n	80003b4 <GPIO_PeriClockControl+0xf4>
			GPIOB_PCLK_DI();
 80003a6:	4b26      	ldr	r3, [pc, #152]	; (8000440 <GPIO_PeriClockControl+0x180>)
 80003a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003aa:	4a25      	ldr	r2, [pc, #148]	; (8000440 <GPIO_PeriClockControl+0x180>)
 80003ac:	f023 0302 	bic.w	r3, r3, #2
 80003b0:	6413      	str	r3, [r2, #64]	; 0x40
}
 80003b2:	e040      	b.n	8000436 <GPIO_PeriClockControl+0x176>
		else if(pGPIOx==GPIOC){
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	4a24      	ldr	r2, [pc, #144]	; (8000448 <GPIO_PeriClockControl+0x188>)
 80003b8:	4293      	cmp	r3, r2
 80003ba:	d106      	bne.n	80003ca <GPIO_PeriClockControl+0x10a>
			GPIOC_PCLK_DI();
 80003bc:	4b20      	ldr	r3, [pc, #128]	; (8000440 <GPIO_PeriClockControl+0x180>)
 80003be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003c0:	4a1f      	ldr	r2, [pc, #124]	; (8000440 <GPIO_PeriClockControl+0x180>)
 80003c2:	f023 0304 	bic.w	r3, r3, #4
 80003c6:	6413      	str	r3, [r2, #64]	; 0x40
}
 80003c8:	e035      	b.n	8000436 <GPIO_PeriClockControl+0x176>
		else if(pGPIOx==GPIOD){
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	4a1f      	ldr	r2, [pc, #124]	; (800044c <GPIO_PeriClockControl+0x18c>)
 80003ce:	4293      	cmp	r3, r2
 80003d0:	d106      	bne.n	80003e0 <GPIO_PeriClockControl+0x120>
			GPIOD_PCLK_DI();
 80003d2:	4b1b      	ldr	r3, [pc, #108]	; (8000440 <GPIO_PeriClockControl+0x180>)
 80003d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003d6:	4a1a      	ldr	r2, [pc, #104]	; (8000440 <GPIO_PeriClockControl+0x180>)
 80003d8:	f023 0308 	bic.w	r3, r3, #8
 80003dc:	6413      	str	r3, [r2, #64]	; 0x40
}
 80003de:	e02a      	b.n	8000436 <GPIO_PeriClockControl+0x176>
		else if(pGPIOx==GPIOE){
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	4a1b      	ldr	r2, [pc, #108]	; (8000450 <GPIO_PeriClockControl+0x190>)
 80003e4:	4293      	cmp	r3, r2
 80003e6:	d106      	bne.n	80003f6 <GPIO_PeriClockControl+0x136>
			GPIOE_PCLK_DI();
 80003e8:	4b15      	ldr	r3, [pc, #84]	; (8000440 <GPIO_PeriClockControl+0x180>)
 80003ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003ec:	4a14      	ldr	r2, [pc, #80]	; (8000440 <GPIO_PeriClockControl+0x180>)
 80003ee:	f023 0310 	bic.w	r3, r3, #16
 80003f2:	6413      	str	r3, [r2, #64]	; 0x40
}
 80003f4:	e01f      	b.n	8000436 <GPIO_PeriClockControl+0x176>
		else if(pGPIOx==GPIOF){
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	4a16      	ldr	r2, [pc, #88]	; (8000454 <GPIO_PeriClockControl+0x194>)
 80003fa:	4293      	cmp	r3, r2
 80003fc:	d106      	bne.n	800040c <GPIO_PeriClockControl+0x14c>
			GPIOF_PCLK_DI();
 80003fe:	4b10      	ldr	r3, [pc, #64]	; (8000440 <GPIO_PeriClockControl+0x180>)
 8000400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000402:	4a0f      	ldr	r2, [pc, #60]	; (8000440 <GPIO_PeriClockControl+0x180>)
 8000404:	f023 0320 	bic.w	r3, r3, #32
 8000408:	6413      	str	r3, [r2, #64]	; 0x40
}
 800040a:	e014      	b.n	8000436 <GPIO_PeriClockControl+0x176>
		else if(pGPIOx==GPIOG){
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	4a12      	ldr	r2, [pc, #72]	; (8000458 <GPIO_PeriClockControl+0x198>)
 8000410:	4293      	cmp	r3, r2
 8000412:	d106      	bne.n	8000422 <GPIO_PeriClockControl+0x162>
			GPIOG_PCLK_DI();
 8000414:	4b0a      	ldr	r3, [pc, #40]	; (8000440 <GPIO_PeriClockControl+0x180>)
 8000416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000418:	4a09      	ldr	r2, [pc, #36]	; (8000440 <GPIO_PeriClockControl+0x180>)
 800041a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800041e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000420:	e009      	b.n	8000436 <GPIO_PeriClockControl+0x176>
		else if(pGPIOx==GPIOH){
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	4a0d      	ldr	r2, [pc, #52]	; (800045c <GPIO_PeriClockControl+0x19c>)
 8000426:	4293      	cmp	r3, r2
 8000428:	d105      	bne.n	8000436 <GPIO_PeriClockControl+0x176>
			GPIOH_PCLK_DI();
 800042a:	4b05      	ldr	r3, [pc, #20]	; (8000440 <GPIO_PeriClockControl+0x180>)
 800042c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800042e:	4a04      	ldr	r2, [pc, #16]	; (8000440 <GPIO_PeriClockControl+0x180>)
 8000430:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000434:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000436:	bf00      	nop
 8000438:	370c      	adds	r7, #12
 800043a:	46bd      	mov	sp, r7
 800043c:	bc80      	pop	{r7}
 800043e:	4770      	bx	lr
 8000440:	40021000 	.word	0x40021000
 8000444:	48000400 	.word	0x48000400
 8000448:	48000800 	.word	0x48000800
 800044c:	48000c00 	.word	0x48000c00
 8000450:	48001000 	.word	0x48001000
 8000454:	48001400 	.word	0x48001400
 8000458:	48001800 	.word	0x48001800
 800045c:	48001c00 	.word	0x48001c00

08000460 <GPIO_Init>:
 * @return            -  none
 *
 * @Note              -  none
 */

void GPIO_Init(GPIO_Handle_t *pGPIOHandle) {
 8000460:	b480      	push	{r7}
 8000462:	b087      	sub	sp, #28
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
	uint32_t temp;
	// 1. Configure mode of pin (interrupt vs no-interrupt)
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG) {
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	795b      	ldrb	r3, [r3, #5]
 800046c:	2b03      	cmp	r3, #3
 800046e:	d820      	bhi.n	80004b2 <GPIO_Init+0x52>
		// Get value of pin in mode register
		// set it to right value
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	795b      	ldrb	r3, [r3, #5]
 8000474:	461a      	mov	r2, r3
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	791b      	ldrb	r3, [r3, #4]
 800047a:	005b      	lsls	r3, r3, #1
 800047c:	fa02 f303 	lsl.w	r3, r2, r3
 8000480:	613b      	str	r3, [r7, #16]
		// Clear 2 bits (11 = 0x3) shifted to the right position
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	681a      	ldr	r2, [r3, #0]
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	791b      	ldrb	r3, [r3, #4]
 800048c:	005b      	lsls	r3, r3, #1
 800048e:	2103      	movs	r1, #3
 8000490:	fa01 f303 	lsl.w	r3, r1, r3
 8000494:	43db      	mvns	r3, r3
 8000496:	4619      	mov	r1, r3
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	400a      	ands	r2, r1
 800049e:	601a      	str	r2, [r3, #0]
		// BITWISE OR: Only change the fields that matter
		pGPIOHandle->pGPIOx->MODER |= temp;
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	6819      	ldr	r1, [r3, #0]
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	693a      	ldr	r2, [r7, #16]
 80004ac:	430a      	orrs	r2, r1
 80004ae:	601a      	str	r2, [r3, #0]
 80004b0:	e0bf      	b.n	8000632 <GPIO_Init+0x1d2>
	}
	else {
		// Configure the type of interrupt use EXTI register
		if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT) {
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	795b      	ldrb	r3, [r3, #5]
 80004b6:	2b04      	cmp	r3, #4
 80004b8:	d117      	bne.n	80004ea <GPIO_Init+0x8a>
			// First 41 lines are on the FTSR
			EXTI->FTSR1 &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004ba:	4b47      	ldr	r3, [pc, #284]	; (80005d8 <GPIO_Init+0x178>)
 80004bc:	68db      	ldr	r3, [r3, #12]
 80004be:	687a      	ldr	r2, [r7, #4]
 80004c0:	7912      	ldrb	r2, [r2, #4]
 80004c2:	4611      	mov	r1, r2
 80004c4:	2201      	movs	r2, #1
 80004c6:	408a      	lsls	r2, r1
 80004c8:	43d2      	mvns	r2, r2
 80004ca:	4611      	mov	r1, r2
 80004cc:	4a42      	ldr	r2, [pc, #264]	; (80005d8 <GPIO_Init+0x178>)
 80004ce:	400b      	ands	r3, r1
 80004d0:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004d2:	4b41      	ldr	r3, [pc, #260]	; (80005d8 <GPIO_Init+0x178>)
 80004d4:	689b      	ldr	r3, [r3, #8]
 80004d6:	687a      	ldr	r2, [r7, #4]
 80004d8:	7912      	ldrb	r2, [r2, #4]
 80004da:	4611      	mov	r1, r2
 80004dc:	2201      	movs	r2, #1
 80004de:	408a      	lsls	r2, r1
 80004e0:	4611      	mov	r1, r2
 80004e2:	4a3d      	ldr	r2, [pc, #244]	; (80005d8 <GPIO_Init+0x178>)
 80004e4:	430b      	orrs	r3, r1
 80004e6:	6093      	str	r3, [r2, #8]
 80004e8:	e035      	b.n	8000556 <GPIO_Init+0xf6>
		}
		else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT) {
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	795b      	ldrb	r3, [r3, #5]
 80004ee:	2b05      	cmp	r3, #5
 80004f0:	d117      	bne.n	8000522 <GPIO_Init+0xc2>
			EXTI->FTSR1 &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004f2:	4b39      	ldr	r3, [pc, #228]	; (80005d8 <GPIO_Init+0x178>)
 80004f4:	68db      	ldr	r3, [r3, #12]
 80004f6:	687a      	ldr	r2, [r7, #4]
 80004f8:	7912      	ldrb	r2, [r2, #4]
 80004fa:	4611      	mov	r1, r2
 80004fc:	2201      	movs	r2, #1
 80004fe:	408a      	lsls	r2, r1
 8000500:	43d2      	mvns	r2, r2
 8000502:	4611      	mov	r1, r2
 8000504:	4a34      	ldr	r2, [pc, #208]	; (80005d8 <GPIO_Init+0x178>)
 8000506:	400b      	ands	r3, r1
 8000508:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800050a:	4b33      	ldr	r3, [pc, #204]	; (80005d8 <GPIO_Init+0x178>)
 800050c:	689b      	ldr	r3, [r3, #8]
 800050e:	687a      	ldr	r2, [r7, #4]
 8000510:	7912      	ldrb	r2, [r2, #4]
 8000512:	4611      	mov	r1, r2
 8000514:	2201      	movs	r2, #1
 8000516:	408a      	lsls	r2, r1
 8000518:	4611      	mov	r1, r2
 800051a:	4a2f      	ldr	r2, [pc, #188]	; (80005d8 <GPIO_Init+0x178>)
 800051c:	430b      	orrs	r3, r1
 800051e:	6093      	str	r3, [r2, #8]
 8000520:	e019      	b.n	8000556 <GPIO_Init+0xf6>
		}
		else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT) {
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	795b      	ldrb	r3, [r3, #5]
 8000526:	2b06      	cmp	r3, #6
 8000528:	d115      	bne.n	8000556 <GPIO_Init+0xf6>
			EXTI->FTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800052a:	4b2b      	ldr	r3, [pc, #172]	; (80005d8 <GPIO_Init+0x178>)
 800052c:	68db      	ldr	r3, [r3, #12]
 800052e:	687a      	ldr	r2, [r7, #4]
 8000530:	7912      	ldrb	r2, [r2, #4]
 8000532:	4611      	mov	r1, r2
 8000534:	2201      	movs	r2, #1
 8000536:	408a      	lsls	r2, r1
 8000538:	4611      	mov	r1, r2
 800053a:	4a27      	ldr	r2, [pc, #156]	; (80005d8 <GPIO_Init+0x178>)
 800053c:	430b      	orrs	r3, r1
 800053e:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000540:	4b25      	ldr	r3, [pc, #148]	; (80005d8 <GPIO_Init+0x178>)
 8000542:	689b      	ldr	r3, [r3, #8]
 8000544:	687a      	ldr	r2, [r7, #4]
 8000546:	7912      	ldrb	r2, [r2, #4]
 8000548:	4611      	mov	r1, r2
 800054a:	2201      	movs	r2, #1
 800054c:	408a      	lsls	r2, r1
 800054e:	4611      	mov	r1, r2
 8000550:	4a21      	ldr	r2, [pc, #132]	; (80005d8 <GPIO_Init+0x178>)
 8000552:	430b      	orrs	r3, r1
 8000554:	6093      	str	r3, [r2, #8]
		}

		// Configure GPIO port selection in SYSCFG EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	791b      	ldrb	r3, [r3, #4]
 800055a:	089b      	lsrs	r3, r3, #2
 800055c:	75fb      	strb	r3, [r7, #23]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	791b      	ldrb	r3, [r3, #4]
 8000562:	f003 0303 	and.w	r3, r3, #3
 8000566:	75bb      	strb	r3, [r7, #22]
		// pinA, pinB, pinC, pinD, ..
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000570:	d042      	beq.n	80005f8 <GPIO_Init+0x198>
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	4a19      	ldr	r2, [pc, #100]	; (80005dc <GPIO_Init+0x17c>)
 8000578:	4293      	cmp	r3, r2
 800057a:	d02b      	beq.n	80005d4 <GPIO_Init+0x174>
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	4a17      	ldr	r2, [pc, #92]	; (80005e0 <GPIO_Init+0x180>)
 8000582:	4293      	cmp	r3, r2
 8000584:	d024      	beq.n	80005d0 <GPIO_Init+0x170>
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	4a16      	ldr	r2, [pc, #88]	; (80005e4 <GPIO_Init+0x184>)
 800058c:	4293      	cmp	r3, r2
 800058e:	d01d      	beq.n	80005cc <GPIO_Init+0x16c>
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a14      	ldr	r2, [pc, #80]	; (80005e8 <GPIO_Init+0x188>)
 8000596:	4293      	cmp	r3, r2
 8000598:	d016      	beq.n	80005c8 <GPIO_Init+0x168>
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	4a13      	ldr	r2, [pc, #76]	; (80005ec <GPIO_Init+0x18c>)
 80005a0:	4293      	cmp	r3, r2
 80005a2:	d00f      	beq.n	80005c4 <GPIO_Init+0x164>
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a11      	ldr	r2, [pc, #68]	; (80005f0 <GPIO_Init+0x190>)
 80005aa:	4293      	cmp	r3, r2
 80005ac:	d008      	beq.n	80005c0 <GPIO_Init+0x160>
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	4a10      	ldr	r2, [pc, #64]	; (80005f4 <GPIO_Init+0x194>)
 80005b4:	4293      	cmp	r3, r2
 80005b6:	d101      	bne.n	80005bc <GPIO_Init+0x15c>
 80005b8:	2307      	movs	r3, #7
 80005ba:	e01e      	b.n	80005fa <GPIO_Init+0x19a>
 80005bc:	2300      	movs	r3, #0
 80005be:	e01c      	b.n	80005fa <GPIO_Init+0x19a>
 80005c0:	2306      	movs	r3, #6
 80005c2:	e01a      	b.n	80005fa <GPIO_Init+0x19a>
 80005c4:	2305      	movs	r3, #5
 80005c6:	e018      	b.n	80005fa <GPIO_Init+0x19a>
 80005c8:	2304      	movs	r3, #4
 80005ca:	e016      	b.n	80005fa <GPIO_Init+0x19a>
 80005cc:	2303      	movs	r3, #3
 80005ce:	e014      	b.n	80005fa <GPIO_Init+0x19a>
 80005d0:	2302      	movs	r3, #2
 80005d2:	e012      	b.n	80005fa <GPIO_Init+0x19a>
 80005d4:	2301      	movs	r3, #1
 80005d6:	e010      	b.n	80005fa <GPIO_Init+0x19a>
 80005d8:	40010400 	.word	0x40010400
 80005dc:	48000400 	.word	0x48000400
 80005e0:	48000800 	.word	0x48000800
 80005e4:	48000c00 	.word	0x48000c00
 80005e8:	48001000 	.word	0x48001000
 80005ec:	48001400 	.word	0x48001400
 80005f0:	48001800 	.word	0x48001800
 80005f4:	48001c00 	.word	0x48001c00
 80005f8:	2300      	movs	r3, #0
 80005fa:	757b      	strb	r3, [r7, #21]
		SYSCFG_PCLK_EN();
 80005fc:	4b59      	ldr	r3, [pc, #356]	; (8000764 <GPIO_Init+0x304>)
 80005fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000600:	4a58      	ldr	r2, [pc, #352]	; (8000764 <GPIO_Init+0x304>)
 8000602:	f043 0301 	orr.w	r3, r3, #1
 8000606:	6513      	str	r3, [r2, #80]	; 0x50
		SYSCFG->EXTICR[temp1] =	(portcode << (temp2 * 4));
 8000608:	7d7a      	ldrb	r2, [r7, #21]
 800060a:	7dbb      	ldrb	r3, [r7, #22]
 800060c:	009b      	lsls	r3, r3, #2
 800060e:	fa02 f103 	lsl.w	r1, r2, r3
 8000612:	4a55      	ldr	r2, [pc, #340]	; (8000768 <GPIO_Init+0x308>)
 8000614:	7dfb      	ldrb	r3, [r7, #23]
 8000616:	3302      	adds	r3, #2
 8000618:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		// Enable EXTI interrupt delivery using IMR
		EXTI->IMR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800061c:	4b53      	ldr	r3, [pc, #332]	; (800076c <GPIO_Init+0x30c>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	687a      	ldr	r2, [r7, #4]
 8000622:	7912      	ldrb	r2, [r2, #4]
 8000624:	4611      	mov	r1, r2
 8000626:	2201      	movs	r2, #1
 8000628:	408a      	lsls	r2, r1
 800062a:	4611      	mov	r1, r2
 800062c:	4a4f      	ldr	r2, [pc, #316]	; (800076c <GPIO_Init+0x30c>)
 800062e:	430b      	orrs	r3, r1
 8000630:	6013      	str	r3, [r2, #0]
	}

	// 2. Configure speed
	// Left shift by 2 per pin number since the register has 2 values.
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	799b      	ldrb	r3, [r3, #6]
 8000636:	461a      	mov	r2, r3
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	791b      	ldrb	r3, [r3, #4]
 800063c:	005b      	lsls	r3, r3, #1
 800063e:	fa02 f303 	lsl.w	r3, r2, r3
 8000642:	613b      	str	r3, [r7, #16]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	689a      	ldr	r2, [r3, #8]
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	791b      	ldrb	r3, [r3, #4]
 800064e:	005b      	lsls	r3, r3, #1
 8000650:	2103      	movs	r1, #3
 8000652:	fa01 f303 	lsl.w	r3, r1, r3
 8000656:	43db      	mvns	r3, r3
 8000658:	4619      	mov	r1, r3
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	400a      	ands	r2, r1
 8000660:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	6899      	ldr	r1, [r3, #8]
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	693a      	ldr	r2, [r7, #16]
 800066e:	430a      	orrs	r2, r1
 8000670:	609a      	str	r2, [r3, #8]

	// 3. Configure pupd
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	79db      	ldrb	r3, [r3, #7]
 8000676:	461a      	mov	r2, r3
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	791b      	ldrb	r3, [r3, #4]
 800067c:	005b      	lsls	r3, r3, #1
 800067e:	fa02 f303 	lsl.w	r3, r2, r3
 8000682:	613b      	str	r3, [r7, #16]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	68da      	ldr	r2, [r3, #12]
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	791b      	ldrb	r3, [r3, #4]
 800068e:	005b      	lsls	r3, r3, #1
 8000690:	2103      	movs	r1, #3
 8000692:	fa01 f303 	lsl.w	r3, r1, r3
 8000696:	43db      	mvns	r3, r3
 8000698:	4619      	mov	r1, r3
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	400a      	ands	r2, r1
 80006a0:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	68d9      	ldr	r1, [r3, #12]
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	693a      	ldr	r2, [r7, #16]
 80006ae:	430a      	orrs	r2, r1
 80006b0:	60da      	str	r2, [r3, #12]

	// 4. Configure OPtype
	// Leftshift by 1 per pin Number
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	7a1b      	ldrb	r3, [r3, #8]
 80006b6:	461a      	mov	r2, r3
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	791b      	ldrb	r3, [r3, #4]
 80006bc:	fa02 f303 	lsl.w	r3, r2, r3
 80006c0:	613b      	str	r3, [r7, #16]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x3 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	685a      	ldr	r2, [r3, #4]
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	791b      	ldrb	r3, [r3, #4]
 80006cc:	4619      	mov	r1, r3
 80006ce:	2303      	movs	r3, #3
 80006d0:	408b      	lsls	r3, r1
 80006d2:	43db      	mvns	r3, r3
 80006d4:	4619      	mov	r1, r3
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	400a      	ands	r2, r1
 80006dc:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	6859      	ldr	r1, [r3, #4]
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	693a      	ldr	r2, [r7, #16]
 80006ea:	430a      	orrs	r2, r1
 80006ec:	605a      	str	r2, [r3, #4]

	// 5. Configure alt functionality
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN) {
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	795b      	ldrb	r3, [r3, #5]
 80006f2:	2b02      	cmp	r3, #2
 80006f4:	d131      	bne.n	800075a <GPIO_Init+0x2fa>
		 // configure alternate functionality
		 // Check the functionalities available with respect to the AF and the pin number


		// 0/1 (which special register)
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber/8;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	791b      	ldrb	r3, [r3, #4]
 80006fa:	08db      	lsrs	r3, r3, #3
 80006fc:	73fb      	strb	r3, [r7, #15]
		// 0-7 which subset of the register
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber%8;
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	791b      	ldrb	r3, [r3, #4]
 8000702:	f003 0307 	and.w	r3, r3, #7
 8000706:	73bb      	strb	r3, [r7, #14]

		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2));
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	7bfa      	ldrb	r2, [r7, #15]
 800070e:	3208      	adds	r2, #8
 8000710:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000714:	7bbb      	ldrb	r3, [r7, #14]
 8000716:	009b      	lsls	r3, r3, #2
 8000718:	220f      	movs	r2, #15
 800071a:	fa02 f303 	lsl.w	r3, r2, r3
 800071e:	43db      	mvns	r3, r3
 8000720:	4618      	mov	r0, r3
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	7bfa      	ldrb	r2, [r7, #15]
 8000728:	4001      	ands	r1, r0
 800072a:	3208      	adds	r2, #8
 800072c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4*temp2));
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	7bfa      	ldrb	r2, [r7, #15]
 8000736:	3208      	adds	r2, #8
 8000738:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	7a5b      	ldrb	r3, [r3, #9]
 8000740:	461a      	mov	r2, r3
 8000742:	7bbb      	ldrb	r3, [r7, #14]
 8000744:	009b      	lsls	r3, r3, #2
 8000746:	fa02 f303 	lsl.w	r3, r2, r3
 800074a:	4618      	mov	r0, r3
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	7bfa      	ldrb	r2, [r7, #15]
 8000752:	4301      	orrs	r1, r0
 8000754:	3208      	adds	r2, #8
 8000756:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 800075a:	bf00      	nop
 800075c:	371c      	adds	r7, #28
 800075e:	46bd      	mov	sp, r7
 8000760:	bc80      	pop	{r7}
 8000762:	4770      	bx	lr
 8000764:	40021000 	.word	0x40021000
 8000768:	40010000 	.word	0x40010000
 800076c:	40010400 	.word	0x40010400

08000770 <GPIO_ToggleOutputPin>:
 * @return            - none
 *
 * @Note              - Changes output state of the GPIO pin
 */

void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber) {
 8000770:	b480      	push	{r7}
 8000772:	b083      	sub	sp, #12
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
 8000778:	460b      	mov	r3, r1
 800077a:	70fb      	strb	r3, [r7, #3]
	// Change output to what it previously was not.
	// Use xor
	pGPIOx->ODR = ((pGPIOx->ODR) ^= (1<<PinNumber));
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	695b      	ldr	r3, [r3, #20]
 8000780:	78fa      	ldrb	r2, [r7, #3]
 8000782:	2101      	movs	r1, #1
 8000784:	fa01 f202 	lsl.w	r2, r1, r2
 8000788:	4053      	eors	r3, r2
 800078a:	687a      	ldr	r2, [r7, #4]
 800078c:	6153      	str	r3, [r2, #20]
 800078e:	687a      	ldr	r2, [r7, #4]
 8000790:	6153      	str	r3, [r2, #20]
}
 8000792:	bf00      	nop
 8000794:	370c      	adds	r7, #12
 8000796:	46bd      	mov	sp, r7
 8000798:	bc80      	pop	{r7}
 800079a:	4770      	bx	lr

0800079c <__libc_init_array>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	4d0d      	ldr	r5, [pc, #52]	; (80007d4 <__libc_init_array+0x38>)
 80007a0:	4c0d      	ldr	r4, [pc, #52]	; (80007d8 <__libc_init_array+0x3c>)
 80007a2:	1b64      	subs	r4, r4, r5
 80007a4:	10a4      	asrs	r4, r4, #2
 80007a6:	2600      	movs	r6, #0
 80007a8:	42a6      	cmp	r6, r4
 80007aa:	d109      	bne.n	80007c0 <__libc_init_array+0x24>
 80007ac:	4d0b      	ldr	r5, [pc, #44]	; (80007dc <__libc_init_array+0x40>)
 80007ae:	4c0c      	ldr	r4, [pc, #48]	; (80007e0 <__libc_init_array+0x44>)
 80007b0:	f000 f818 	bl	80007e4 <_init>
 80007b4:	1b64      	subs	r4, r4, r5
 80007b6:	10a4      	asrs	r4, r4, #2
 80007b8:	2600      	movs	r6, #0
 80007ba:	42a6      	cmp	r6, r4
 80007bc:	d105      	bne.n	80007ca <__libc_init_array+0x2e>
 80007be:	bd70      	pop	{r4, r5, r6, pc}
 80007c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80007c4:	4798      	blx	r3
 80007c6:	3601      	adds	r6, #1
 80007c8:	e7ee      	b.n	80007a8 <__libc_init_array+0xc>
 80007ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80007ce:	4798      	blx	r3
 80007d0:	3601      	adds	r6, #1
 80007d2:	e7f2      	b.n	80007ba <__libc_init_array+0x1e>
 80007d4:	080007fc 	.word	0x080007fc
 80007d8:	080007fc 	.word	0x080007fc
 80007dc:	080007fc 	.word	0x080007fc
 80007e0:	08000800 	.word	0x08000800

080007e4 <_init>:
 80007e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007e6:	bf00      	nop
 80007e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007ea:	bc08      	pop	{r3}
 80007ec:	469e      	mov	lr, r3
 80007ee:	4770      	bx	lr

080007f0 <_fini>:
 80007f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007f2:	bf00      	nop
 80007f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007f6:	bc08      	pop	{r3}
 80007f8:	469e      	mov	lr, r3
 80007fa:	4770      	bx	lr
